<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Racon</name>
    </assembly>
    <members>
        <member name="T:Racon.CGenericFederate">
            <summary>
            Presents an extension point for application-specific federates. The generic federate defines the abstraction and is implemented as a wrapper fa√ßade class. 
            </summary>
            <remarks>
            <para> This class is the base wrapper for the RTI-specific classes (i.e. the RTI Layer) and the main extension point. This class should be inherited by a class that encapsulates the federate-specific data.</para>
            <para> Most federate developers (mainly students or inexperienced simulation developers) are not interested in the details of this subsystem, which complicate their implementation; instead their only need is to initialize the federation ex-ecution. Hence, the generic federate provides a higher-level interface. The developer calls only the method (InitializeFederation) rather than calling related series of low-level RTI methods (such as; create federation, join federation, create regions, and publish and subscribe classes). One of the rationales here is to simplify the interface for novice HLA users by hiding the perplexing RTI class relationships. On the other hand, the low-level RTI methods can still be called using the CRtiAmb.</para>
            <para>RACoN provides notifications about HLA-related services to the application-specific federate by using events (event-based notification). Therefore, an application-specific federate can handle events triggered from the commu-nication layer by overriding the event handlers that are subscribed by the base federate in order to customize their RTI-related behaviors (delegated event handling). For example, when a new object is discovered, the RACoN assembly raises a new object discovered event. The application-specific fed-erate that hooks the event, is notified that the event has been triggered. Then, the application-specific federate can take action such as adding the new ob-ject to its scene graph or creating a local substitute for that object. .NET event handling structures are used for implementing events and event handling mechanisms. Events are categorized according to their initiators, as follows: </para>
            <list type="bullet">
            <item>RTI-initiated events generated by federate ambassador callbacks such as an object discovered event. </item>
            <item>Federate-initiated events generated by the RTI ambassador such as a federate joined event. </item>
            <item>RACoN events generated by the generic federate such as a feder-ate state changed event.</item>
            </list>
            <para>The federate-initiated and RACON event handlers are executed as soon as they are raised, but, the RTI-initiated events (callbacks from the RTI to the federate ambassador) are queued as events for processing at the end of each simulation cycle. They are executed when the federate run method is called. The federate Run() method must be called in the main (simulation loop) of the application.</para>
            </remarks>
        </member>
        <member name="P:Racon.CGenericFederate.RtiAmb">
            <summary>
            The reference for internal RTI ambassador. This reference can be used to access internal RTI ambassador interface
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.FederateState">
            <summary>
            Current federate state. When it is set, it raises <see cref="E:Racon.CGenericFederate.FederateStateChanged"/> Event.
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.FederationExecutionState">
            <summary>
            Current federation execution state. When it is set, it raises <see cref="E:Racon.CGenericFederate.FederationStateChanged"/> Event.
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.StatusMessage">
            <summary>
            The log message RACoN. When it is set, it raises <see cref="E:Racon.CGenericFederate.StatusMessageChanged"/> Event.
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.TraceLog">
            <summary>
            TraceLog dumbs the logger.Log
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.LogLevel">
            <summary>
            Current Log Level. When it is set, it reports version, RTI native library, and current log level via <see cref="P:Racon.CGenericFederate.StatusMessage"/>. 
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.RTILibrary">
            <summary>
            Current type of native RTI Library. It is set via constructor only, <see cref="P:Racon.CGenericFederate.RtiAmb"/> switches accordingly.
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.FederationExecution">
            <summary>
            The federation execution that this federate will interact (e.g. create, join etc.).
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.FederateHandle">
            <summary>
            Federate handle.
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.Time">
            <summary>
            The federate logical time. A point in HLA time axis.
            </summary>
        </member>
        <member name="P:Racon.CGenericFederate.Lookahead">
            <summary>
            The federate lookahead. Time interval
            </summary>
        </member>
        <member name="E:Racon.CGenericFederate.StatusMessageChanged">
            <summary>
            Log message change event.
            </summary>
        </member>
        <member name="E:Racon.CGenericFederate.FederateStateChanged">
            <summary>
            Federate state change event.
            </summary>
        </member>
        <member name="E:Racon.CGenericFederate.FederationStateChanged">
            <summary>
            Federation state change event.
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.OnStatusMessageChanged">
            <summary>
            Wraps the event in a protected virtual method to enable derived classes to raise the event.
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.OnFederateStateChanged(Racon.CFederateStateEventArgs)">
            <summary>
            Wraps the event in a protected virtual method to enable derived classes to raise the event.
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.OnFederationStateChanged(Racon.CFederationStateEventArgs)">
            <summary>
            Wraps the event in a protected virtual method to enable derived classes to raise the event.
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.#ctor(Racon.RTILibraryType)">
            <summary>
            CGenericFederate constructor
            </summary>
            <param name="rti"> Native RTI library reference. Default is RTILibraryType.HLA1516e_OpenRti</param>
        </member>
        <member name="M:Racon.CGenericFederate.Dispose">
            <summary>
            CGenericFederate destructor disposes 
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) 
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_ConnectionLost(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.4: Connection Lost
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_FederationExecutionsReported(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.8: Federation Executions Reported. Federate ambassador callback to get the federation executions
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_OnSynchronizationPointRegistrationConfirmedHandler(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.12a: FdAmb_OnSynchronizationPointRegistrationConfirmedHandler
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_OnSynchronizationPointRegistrationFailedHandler(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.12b: FdAmb_OnSynchronizationPointRegistrationFailedHandler
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_SynchronizationPointAnnounced(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.13: Federate ambassador callback. FdAmb_SynchronizationPointAnnounced.
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_FederationSynchronized(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.15: Federate ambassador callback. FdAmb_FederationSynchronized
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_InitiateFederateSaveHandler(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.17: Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_FederationSaved(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.20: Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_FederationSaveStatusResponse(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.22: FdAmb_FederationSaveStatusResponse
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_ConfirmFederationRestorationRequestHandler(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.25: Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_FederationRestoreBegun(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.26: Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_InitiateFederateRestoreHandler(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.27: Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_FederationRestored(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.29: Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_FederationRestoreStatusResponse(System.Object,Racon.RtiLayer.HlaFederationManagementEventArgs)">
            <summary>
            IEEE1516.1-2010 4.32: FdAmb_FederationRestoreStatusResponse
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_StartRegistrationForObjectClassAdvisedHandler(System.Object,Racon.RtiLayer.HlaDeclarationManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_StopRegistrationForObjectClassAdvisedHandler(System.Object,Racon.RtiLayer.HlaDeclarationManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_TurnInteractionsOffAdvisedHandler(System.Object,Racon.RtiLayer.HlaDeclarationManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_TurnInteractionsOnAdvisedHandler(System.Object,Racon.RtiLayer.HlaDeclarationManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_ObjectDiscoveredHandler(System.Object,Racon.RtiLayer.HlaObjectEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_ObjectRemovedHandler(System.Object,Racon.RtiLayer.HlaObjectEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_AttributeValueUpdateRequestedHandler(System.Object,Racon.RtiLayer.HlaObjectEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_InteractionReceivedHandler(System.Object,Racon.RtiLayer.HlaInteractionEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_ObjectAttributesReflectedHandler(System.Object,Racon.RtiLayer.HlaObjectEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_TurnUpdatesOnForObjectInstanceAdvisedHandler(System.Object,Racon.RtiLayer.HlaObjectEventArgs)">
            <summary>
            Federate ambassador callback - TurnUpdatesOnForObjectInstance
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_TurnUpdatesOffForObjectInstanceAdvisedHandler(System.Object,Racon.RtiLayer.HlaObjectEventArgs)">
            <summary>
            Federate ambassador callback - TurnUpdatesOffForObjectInstance
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_AttributeOwnershipAssumptionRequested(System.Object,Racon.RtiLayer.HlaOwnershipManagementEventArgs)">
            <summary>
            IEEE1516-2010 7.4
            FdAmb_AttributeOwnershipAssumptionRequested
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_RequestDivestitureConfirmation(System.Object,Racon.RtiLayer.HlaOwnershipManagementEventArgs)">
            <summary>
            IEEE1516-2010 7.5
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_AttributeOwnershipAcquisitionCancellationConfirmed(System.Object,Racon.RtiLayer.HlaOwnershipManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_AttributeOwnershipUnavailable(System.Object,Racon.RtiLayer.HlaOwnershipManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_AttributeOwnershipDivestitureNotified(System.Object,Racon.RtiLayer.HlaOwnershipManagementEventArgs)">
            <summary>
            Federate ambassador callback // HLA13 only
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_AttributeOwnershipAcquisitionNotified(System.Object,Racon.RtiLayer.HlaOwnershipManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_AttributeOwnershipInformed(System.Object,Racon.RtiLayer.HlaOwnershipManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_AttributeOwnershipReleaseRequestedHandler(System.Object,Racon.RtiLayer.HlaOwnershipManagementEventArgs)">
            <summary>
            Federate ambassador callback - HLA13 only
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_TimeConstrainedEnabled(System.Object,Racon.RtiLayer.HlaTimeManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_TimeRegulationEnabled(System.Object,Racon.RtiLayer.HlaTimeManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_TimeAdvanceGrant(System.Object,Racon.RtiLayer.HlaTimeManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.FdAmb_RequestRetraction(System.Object,Racon.RtiLayer.HlaTimeManagementEventArgs)">
            <summary>
            Federate ambassador callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_NotConnected(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_FederateConnected
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_FederateConnected(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_FederateConnected
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_FederateDisconnected(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_FederateDisconnected
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_FederateJoined(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_FederateJoined
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_FederateResigned(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_FederateResigned
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_FederationExecutionCreated(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_FederationExecutionCreated
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_FederationExecutionDestroyed(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_FederationExecutionDestroyed
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_ObjectRegistered(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_ObjectRegistered
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_HLAClassPublished(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_HLAClassPublished
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_HLAClassSubscribed(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_HLAClassSubscribed
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RtiAmb_RTIEventOccured(System.Object,Racon.RtiLayer.RaconEventArgs)">
            <summary>
            RTI ambassador handler for RtiAmb_RTIEventOccured
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.Contract_ContractFailed(System.Object,System.Diagnostics.Contracts.ContractFailedEventArgs)">
             <summary>
            Contract handler
             </summary>
        </member>
        <member name="M:Racon.CGenericFederate.Log_ListChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Whenever a new log entry happens, this is used to check to report the message according to log level
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.Run">
            <summary>
            Method to tick and process the callbacks.
            </summary>
            <remarks>This method is called to tick and process the callbacks. Typically, it is called in main simuation loop.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.SetSom(Racon.ObjectModel.CObjectModel)">
            <summary>
            Sets the simulation object model for federate.
            </summary>
            <param name="objectModel">Object Model</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.InitializeFederation(Racon.CFederationExecution)">
            <summary>
            Initializes federation execution:
            (1) Connects.
            (2) Creates federation execution.
            (3) Joins federation execution.
            (4) Creates regions.
            (5) Declares capability.
            </summary>
            <param name="fedexec">Federation Execution</param>
            <returns>returns True/False.</returns>
            <remarks>High level interface. This method creates federation if it is first one, joins federation, creates regions, and publishes and subscribes classes.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.FinalizeFederation(Racon.CFederationExecution,Racon.ResignAction)">
            <summary>
            Finalizes federation execution with user selected Resign Action:
            (1) Resign federation execution
            (2) Try to destroy federation execution
            (3) Disconnect
            </summary>
            <param name="fedexec">Federation Execution</param>
            <param name="action">Resign Action. Default is ResignAction.DELETE_OBJECTS_THEN_DIVEST</param>
            <returns>True if method call is succesfull.</returns>
            <remarks>Higher level interface. This method resigns federation, destroys federation if it is last one.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.Connect(Racon.CallbackModel,System.String)">
            <summary>
            IEEE1516.1-2010 4.2: Connects to RTI
            </summary>
            <param name="callbackModel"> Callback model </param>
            <param name="localSettingsDesignator">Connection paramaters in form of "protocol"://"ip":"port". For example: rti://127.0.0.1:12345 </param>
            <returns>returns True/False.</returns>    
            <remarks>This method is for IEEE1516-2010 compatiblity. Sets the federate status as CONNECTED.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.Disconnect">
            <summary>
            IEEE1516.1-2010 4.3: Disconnects from RTI
            </summary>
            <remarks>This method is for IEEE1516-2010 compatiblity. Sets the federate status as NOTCONNECTED.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.CreateFederationExecution(System.String,System.String,System.String)">
            <summary>
            IEEE1516.1-2010 4.5: Creates a federation execution 
            </summary>
            <param name="fedexName">Name of the Federation Execution.</param>
            <param name="fomModule">Path of the FDD file.</param>
            <param name="logicalTimeImplementationName">Optional logical time implementation. If not provided, the RTI provided HLAfloat64Time representation of logical time shall be used.</param>
            <returns>True if method call is succesfull.</returns>
            <remarks>This method creates federation execution.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.CreateFederationExecution(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            IEEE1516.1-2010 4.5: Creates a federation execution with multiple FOM modules
            </summary>
            <param name="fedexName">Name of the Federation Execution.</param>
            <param name="fomModules">FOM modules</param>
            <param name="logicalTimeImplementationName">Optional logical time implementation. If not provided, the RTI provided HLAfloat64Time representation of logical time shall be used.</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.CreateFederationExecutionWithMIM(System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            IEEE1516.1-2010 4.5: Creates a federation execution with multiple FOM modules and a MIM module
            </summary>
            <param name="fedexName">Name of the Federation Execution.</param>
            <param name="fomModules">FOM modules</param>
            <param name="mimModule">Optional MIM designator. The RTI shall load the supplied MIM if specified; otherwise, it shall automatically load the standard MIM. the supplied MIM module designator shall not be ‚ÄúHLAstandardMIM.‚Äù</param>
            <param name="logicalTimeImplementationName">Optional logical time implementation. If not provided, the RTI provided HLAfloat64Time representation of logical time shall be used.</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.ListFederationExecutions">
            <summary>
            IEEE1516.1-2010 4.7: Requests a list of current federation executions
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.JoinFederationExecution(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            IEEE1516.1-2010 4.9: Joins a federation execution 
            </summary>
            <param name="federateType">Type of the joined federate. The federate type is used to distinguish federate categories in federation save-and-restore operation. </param>
            <param name="federationExecutionName">Name of the Federation Execution to be joined.</param>
            <param name="fomModules">The FOM module designators are optional and are used to provide additional FDD. The contents cannot conflict with the current FDD specified in federa-tion execution creation.</param>
            <returns>True if method call is succesfull.</returns>
            <remarks>Federate joins a federation execution.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.JoinFederationExecution(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            IEEE1516.1-2010 4.9: join federation execution with a federate name
            </summary>
            <param name="federateName">Name must be unique in the federation execution.</param>
            <param name="federateType">Type of the joined federate. The federate type is used to distinguish federate categories in federation save-and-restore operation. </param>
            <param name="federationExecutionName">Name of the Federation Execution to be joined.</param>
            <param name="fomModules">The FOM module designators are optional and are used to provide additional FDD. The contents cannot conflict with the current FDD specified in federa-tion execution creation.</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.JoinFederationExecution(System.String,System.String)">
            <summary>
            HLA13 - join federation
            </summary>
            <param name="federateName">Name must be unique in the federation execution.</param>
            <param name="federationExecutionName">Name of the Federation Execution to be joined.</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.ResignFederationExecution(Racon.ResignAction)">
            <summary>
            Resigns federation execution with user selected Resign Action 
            </summary>
            <param name="action">Resign Action</param>
            <returns>True if method call is succesfull.</returns>
            <remarks>This method resigns federation execution.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.DestroyFederationExecution(System.String)">
            <summary>
            Destroys the federation execution specified with a name
            </summary>
            <param name="fedexName">Name of the Federation Execution to be destroyed.</param>
            <returns>True if method call is succesfull.</returns>
            <remarks>This method destroys federation execution.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.RegisterFederationSynchronizationPoint(System.String,System.String)">
            <summary>
            This method shall be used to initiate the registration of an upcoming federation synchronization point label.
            </summary>
            <param name="label">Synchronization point label</param>
            <param name="tag">User-supplied tag</param>
        </member>
        <member name="M:Racon.CGenericFederate.RegisterFederationSynchronizationPoint(System.String,System.String,System.Collections.Generic.List{System.UInt32})">
            <summary>
            This method shall be used to initiate the registration of an upcoming federation synchronization point label.
            </summary>
            <param name="label">Synchronization point label</param>
            <param name="tag">User-supplied tag</param>
            <param name="federates">set of joined federate designators</param>
        </member>
        <member name="M:Racon.CGenericFederate.SynchronizationPointAchieved(System.String,System.Boolean)">
            <summary>
            This method shall inform the RTI that the joined federate has reached the specified synchronization point.
            </summary>
            <param name="label">Synchronization point label</param>
            <param name="result">Optional synchronization-success indicator</param>
        </member>
        <member name="M:Racon.CGenericFederate.RequestFederationSave(System.String)">
            <summary>
            This method requests a federation save as soon as possible supplied with a string associated to a particular save.
            </summary>
            <param name="label">String label</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.RequestFederationSave(System.String,System.Double)">
            <summary>
            This method requests a federation save at the specified time supplied with a string associated to a particular save.
            </summary>
            <param name="label">String label</param>
            <param name="time">time</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.FederateSaveBegun">
            <summary>
            This method informs RTI that save begun.
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.FederateSaveComplete(System.Boolean)">
            <summary>
            A false value indicates the unsuccessful completion of a save of a federate-managed state, as initiated by an initiateFederateSave() callback. A true value indicates a successful completion.
            </summary>
            <param name="isCompleted">isCompleted</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.AbortFederationSave">
            <summary>
            IEEE1516.1-2010 4.21: abortFederationSave
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.QueryFederationSaveStatus">
            <summary>
            IEEE1516.1-2010 4.22: queryFederationSaveStatus
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RequestFederationRestore(System.String)">
            <summary>
            This method requests a federation restore associated with a previously saved name federation state.
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.FederateRestoreComplete(System.Boolean)">
            <summary>
            A false value indicates the unsuccessful completion of a restoration of a federate-managed state. A true value indicates a successful completion.
            </summary>
            <param name="isCompleted">isCompleted</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.AbortFederationRestore">
            <summary>
            IEEE1516.1-2010 4.30: abortFederationRestore
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.QueryFederationRestoreStatus">
            <summary>
            IEEE1516.1-2010 4.31: queryFederationRestoreStatus
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.DeclareCapability">
            <summary>
            Declares capability of a federate in terms of Publish/Subscribe:
            (1) Enables object class relevance advisory switch.
            (2) Gets object class and attribute handles.
            (3) Publishes/subscribes all the object classes in SOM according to their PS status.
            (4) Enables interaction relevance advisory switch.
            (5) Gets interaction class and parameter handles.
            (6) Publishes/subscribes all the interaction classes in SOM according to their PS status.
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.PublishObjectClass(Racon.RtiLayer.HlaObjectClass)">
            <summary>
            Publish OC - With its all subscribable attributes 
            </summary>
            <param name="oc">Object class</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.PublishObjectClass(Racon.RtiLayer.HlaObjectClass,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            Publish OC - With some selected attributes 
            </summary>
            <param name="oc">Object class</param>
            <param name="attributes">Attributes</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.SubscribeObjectClass(Racon.RtiLayer.HlaObjectClass)">
            <summary>
            Subscribes OC - With its all subscribable attributes 
            </summary>
            <param name="oc">Object class</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.SubscribeObjectClass(Racon.RtiLayer.HlaObjectClass,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},System.Boolean)">
            <summary>
            Subscribe OC - With some selected attributes 
            </summary>
            <param name="oc">Object class</param>
            <param name="attributes">Attributes</param>
            <param name="active">default is true</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.UnsubscribeInteractionClass(Racon.RtiLayer.HlaInteractionClass)">
            <summary>
            UnsubscribeInteractionClass 
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.UnsubscribeObjectClass(Racon.RtiLayer.HlaObjectClass)">
            <summary>
            UnsubscribeObjectClass - For all attributes of an object class
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.createRegions">
            <summary>
            Racon: createRegions for HLA13
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.CreateRegion(Racon.RtiLayer.HlaRegion,System.Collections.Generic.List{Racon.RtiLayer.HlaDimension})">
            <summary>
            IEEE1516.1-2010 9.2: createRegion
            </summary>
            <param name="region"></param>
            <param name="dimensions"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.CommitRegionModifications(System.Collections.Generic.List{Racon.RtiLayer.HlaRegion})">
            <summary>
            IEEE1516.1-2010 9.3: commitRegionModifications
            </summary>
            <param name="regions"></param>
        </member>
        <member name="M:Racon.CGenericFederate.DeleteRegion(Racon.RtiLayer.HlaRegion)">
            <summary>
            IEEE1516.1-2010 9.4: deleteRegion
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Racon.CGenericFederate.RegisterHlaObject(Racon.RtiLayer.HlaObject,Racon.RtiLayer.AttributeHandleSetRegionHandleSetPairVector)">
            <summary>
            IEEE1516.1-2010 9.5: registerObjectInstanceWithRegions
            </summary>
            <param name="objectTobeRegistered"></param>
            <param name="pairs">AttributeHandleSetRegionHandleSetPairVector</param>
        </member>
        <member name="M:Racon.CGenericFederate.RegisterHlaObject(Racon.RtiLayer.HlaObject,Racon.RtiLayer.HlaRegion)">
            <summary>
            Registers object with a specific region with all its publishable (P) attributes. Here, we assume that all attributes are related with a single region.
            </summary>
            <param name="theObject">Object to be registered. If object name is set then this method registers the object with its name. Object name must be unique.</param>
            <param name="region">The region. Here, we assume that all attributes are related with this region.</param>
            <returns>Returns true/false.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.RegisterHlaObject(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},Racon.RtiLayer.HlaRegion)">
            <summary>
            Registers object with a specific region with some of its publishable attributes. Here, we assume that all attributes are related with a single region.
            </summary>
            <param name="theObject">Object to be registered.</param>
            <param name="attributes">Selected object attributes that will be related with the region.</param>
            <param name="region">The region. Here, we assume that all attributes are related with this region.</param>
            <returns>Returns true/false.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.RegisterHlaObject(Racon.RtiLayer.HlaObject,Racon.RtiLayer.AttributeRegionPairs)">
            <summary>
            Registers object with its publishable attributes with specific regions. Each attribute may be associated with a different region. To do this, the user must pair an attribute with a region and then add the pair to a dictionary.
            </summary>
            <param name="theObject">Object to be registered.</param>
            <param name="attributeRegionPairs">Selected object attributes that will be related with the region.</param>
            <returns>Returns true/false.</returns>
            <example>
            This sample shows how to call the RegisterHlaObject(HlaObject theObject, AttributeRegionPairs attributeRegionPairs) method.
            <code>
            RACoN.ObjectModel.AttributeRegionPairs pairs = new RACoN.ObjectModel.AttributeRegionPairs();
            pairs.Add(myAttribute, myRegion);
            myFederate.RegisterHlaObject(myObject, pairs);
            </code>
            </example>
        </member>
        <member name="M:Racon.CGenericFederate.associateRegionsForUpdates(Racon.RtiLayer.HlaObject,Racon.RtiLayer.AttributeHandleSetRegionHandleSetPairVector)">
            <summary>
            IEEE1516.1-2010 9.6: associateRegionsForUpdates
            </summary>
            <param name="obj"></param>
            <param name="pairs"></param>
        </member>
        <member name="M:Racon.CGenericFederate.AssociateRegionForUpdates(Racon.RtiLayer.HlaRegion,Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            HLA13: AssociateRegionForUpdates
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.UnassociateRegionsForUpdates(Racon.RtiLayer.HlaObject,Racon.RtiLayer.AttributeHandleSetRegionHandleSetPairVector)">
            <summary>
            IEEE1516.1-2010 9.7: unassociateRegionsForUpdates
            </summary>
            <param name="obj"></param>
            <param name="pairs"></param>
        </member>
        <member name="M:Racon.CGenericFederate.UnassociateRegionForUpdates(Racon.RtiLayer.HlaRegion,Racon.RtiLayer.HlaObject)">
            <summary>
            HLA13: unassociateRegionForUpdates
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.subscribeObjectClassAttributesWithRegions(Racon.RtiLayer.HlaObjectClass,Racon.RtiLayer.AttributeHandleSetRegionHandleSetPairVector,System.Boolean)">
            <summary>
            IEEE1516.1-2010 9.8: subscribeObjectClassAttributesWithRegions
            </summary>
            <param name="oc"></param>
            <param name="pairs"></param>
            <param name="passiveSubscriptionIndicator"></param>
        </member>
        <member name="M:Racon.CGenericFederate.subscribeObjectClassAttributesWithRegion(Racon.RtiLayer.HlaObjectClass,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},Racon.RtiLayer.HlaRegion,System.Boolean)">
            <summary>
            // Subscribe Object Class With Region
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.UnsubscribeObjectClassWithRegions(Racon.RtiLayer.HlaObjectClass,Racon.RtiLayer.AttributeHandleSetRegionHandleSetPairVector)">
            <summary>
            IEEE1516.1-2010 9.9: unsubscribeObjectClassWithRegions
            </summary>
            <param name="oc"></param>
            <param name="pairs"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.UnsubscribeObjectClassWithRegions(Racon.RtiLayer.HlaObjectClass,Racon.RtiLayer.HlaRegion)">
            <summary>
            HLA13: Unsubscribe Object Class With Region
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.SubscribeInteractionClassWithRegions(Racon.RtiLayer.HlaInteractionClass,System.Collections.Generic.List{Racon.RtiLayer.HlaRegion},System.Boolean)">
            <summary>
            IEEE1516.1-2010 9.10: subscribeInteractionClassWithRegions
            </summary>
            <param name="ic"></param>
            <param name="regions"></param>
            <param name="indicator"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.SubscribeInteractionClass(Racon.RtiLayer.HlaInteractionClass,Racon.RtiLayer.HlaRegion)">
            <summary>
            HLA13: Subscribe Interaction With Region
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.UnSubscribeInteractionClassWithRegions(Racon.RtiLayer.HlaInteractionClass,System.Collections.Generic.List{Racon.RtiLayer.HlaRegion})">
            <summary>
            IEEE1516.1-2010 9.11: unSubscribeInteractionClassWithRegions
            </summary>
            <param name="ic"></param>
            <param name="regions"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.UnsubscribeInteractionClass(Racon.RtiLayer.HlaInteractionClass,Racon.RtiLayer.HlaRegion)">
            <summary>
            HLA13: Unsubscribe Interaction Class With Region
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.SendInteractionWithRegions``1(Racon.RtiLayer.HlaInteractionClass,System.Collections.Generic.List{Racon.RtiLayer.HlaRegion},``0)">
            <summary>
            IEEE1516.1-2010 9.12: sendInteractionWithRegions
            </summary>
            <param name="ic"></param>
            <param name="regions"></param>
            <param name="user_supplied_tag"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.SendInteractionWithRegions``1(Racon.RtiLayer.HlaInteractionClass,System.Collections.Generic.List{Racon.RtiLayer.HlaRegion},``0,System.Double)">
            <summary>
            IEEE1516.1-2010 9.12: sendInteractionWithRegions with timestamp
            </summary>
            <param name="ic"></param>
            <param name="regions"></param>
            <param name="user_supplied_tag"></param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.RequestAttributeValueUpdateWithRegions``1(Racon.RtiLayer.HlaObjectClass,Racon.RtiLayer.AttributeHandleSetRegionHandleSetPairVector,``0)">
            <summary>
            IEEE1516.1-2010 9.13: requestClassAttributeValueUpdateWithRegions
            </summary>
            <param name="oc"></param>
            <param name="pairs"></param>
            <param name="user_supplied_tag"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.RequestClassAttributeValueUpdateWithRegion(Racon.RtiLayer.HlaObjectClass,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},Racon.RtiLayer.HlaRegion)">
            <summary>
            HLA13: Request Class Attribute Value Update w/ Region
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.UpdateAttributeValues``1(Racon.RtiLayer.HlaObject,``0)">
            <summary>
            IEEE1516.1-2010 6.10: UpdateAttributeValues
            </summary>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.UpdateAttributeValues``1(Racon.RtiLayer.HlaObject,``0,System.Double)">
            <summary>
            IEEE1516.1-2010 6.10: UpdateAttributeValues with timestamp
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.UpdateAttributeValues(Racon.RtiLayer.HlaObject)">
            <summary>
            HLA13: UpdateAttributeValues
            </summary>
            <param name="theObject"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.UpdateAttributeValues(Racon.RtiLayer.HlaObject,System.Double)">
            <summary>
            HLA13: UpdateAttributeValues
            </summary>
            <param name="theObject"></param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.SendInteraction``1(Racon.RtiLayer.HlaInteraction,``0)">
            <summary>
            IEEE1516.1-2010 6.12: Sends an interaction. If a region is specified then send the interaction in that region.
            </summary>
            <param name="theInteraction">HLA interaction to be sent.</param>
            <param name="user_supplied_tag"></param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.SendInteraction``1(Racon.RtiLayer.HlaInteraction,``0,System.Double)">
            <summary>
            IEEE1516.1-2010 6.12: Send Interaction with timestamp.
            </summary>
            <param name="theInteraction">HLA interaction to be sent.</param>
            <param name="user_supplied_tag"></param>
            <param name="timestamp">timestamp.</param>
            <returns> returns Event Retraction Handle.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.SendInteraction(Racon.RtiLayer.HlaInteraction,System.Double)">
            <summary>
            HLA13: SendInteraction
            </summary>
            <param name="theInteraction"></param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.SendInteraction(Racon.RtiLayer.HlaInteraction,Racon.RtiLayer.HlaRegion)">
            <summary>
            HLA13: SendInteraction
            </summary>
            <param name="theInteraction"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.DeleteObjectInstance``1(Racon.RtiLayer.HlaObject,``0)">
            <summary>
            IEEE1516.1-2010 6.14: Delete Object Instance. With user-supplied tag.
            </summary>
            <param name="obj">HLA Object</param>
            <param name="user_supplied_tag">User-Supplied Tag</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Racon.CGenericFederate.DeleteObjectInstance``1(Racon.RtiLayer.HlaObject,``0,System.Double)">
            <summary>
            IEEE1516.1-2010 6.14: Schedule to delete Object Instance at a specified time. user-supplied tag.
            </summary>
            <param name="obj">HLA Object</param>
            <param name="user_supplied_tag">User-Supplied Tag</param>
            <param name="timestamp">Timestamp</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Racon.CGenericFederate.DeleteObjectInstance(Racon.RtiLayer.HlaObject)">
            <summary>
            HLA13: Delete Object Instance. Null user-supplied tag.
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.DeleteObjectInstance(Racon.RtiLayer.HlaObject,System.Double)">
            <summary>
            HLA13: Delete Object Instance. Null user-supplied tag.
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.RequestAttributeValueUpdate``1(Racon.RtiLayer.HlaObjectClass,``0)">
            <summary>
            Request Attribute Value Update
            </summary>
            <param name="theClass">HLA Object Class</param>
            <param name="user_supplied_tag">user_supplied_tag</param>
            <returns>True if method call is succesfull.</returns>
            <remarks>This method is called to request an update of the values of all attributes for all objects related to the specified HLA object class in the parameter.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.RequestAttributeValueUpdate``1(Racon.RtiLayer.HlaObjectClass,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},``0)">
            <summary>
            Request Attribute Value Update
            </summary>
            <param name="theClass">HLA Object Class</param>
            <param name="attributes">The attribute set that update requested.</param>
            <param name="user_supplied_tag">user_supplied_tag</param>
            <returns>True if method call is succesfull.</returns>
            <remarks>This method is called to request an update of the values of the selected attributes for all objects related to the specified HLA object class in the parameter.
            </remarks>
            <example>
            This sample shows how to call the requestClassAttributeValueUpdate() method with some selected attributes.
            <code>
            List&lt;HlaAttribute&gt; attributes = new List&lt;HlaAttribute&gt;();
            attributes.Add(Som.UserOC.NickName);
            attributes.Add(Som.UserOC.Status);
            RequestAttributeValueUpdate(Som.UserOC, attributes);
            </code>
            </example>
        </member>
        <member name="M:Racon.CGenericFederate.RequestAttributeValueUpdate``1(Racon.RtiLayer.HlaObject,``0)">
            <summary>
            Request Attribute Value Update
            </summary>
            <param name="theObject">HLA Object</param>
            <param name="user_supplied_tag">user_supplied_tag</param>
            <returns>True if method call is succesfull.</returns>
            <remarks>This method requests an update of the values of all attributes for a specific HLA object specified in the parameter.
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.RequestAttributeValueUpdate``1(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},``0)">
            <summary>
            Request Attribute Value Update
            </summary>
            <param name="theObject">HLA Object</param>
            <param name="attributes">The attribute set that update requested.</param>
            <param name="user_supplied_tag">user_supplied_tag</param>
            <returns>True if method call is succesfull.</returns>
            <remarks>This method requests an update of the values of the selected attributes for a specific HLA object specified in the parameter.
            </remarks>
            <example>
            This sample shows how to call the requestClassAttributeValueUpdate() method with some selected attributes.
            <code>
            List&lt;HlaAttribute&gt; attributes = new List&lt;HlaAttribute&gt;();
            attributes.Add(Som.UserOC.NickName);
            attributes.Add(Som.UserOC.Status);
            RequestAttributeValueUpdate(UserObject, attributes);
            </code>
            </example>
        </member>
        <member name="M:Racon.CGenericFederate.RequestAttributeValueUpdate(Racon.RtiLayer.HlaObjectClass,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            HLA13: RequestAttributeValueUpdate (object class)
            </summary>
            <param name="theClass"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.RequestAttributeValueUpdate(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            HLA13: RequestAttributeValueUpdate (object)
            </summary>
            <param name="theObject"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.RegisterHlaObject(Racon.RtiLayer.HlaObject)">
            <summary>
            Registers (create) an HLA object instance. The object handle is assigned by the RTI at the end of a succesfull method call.
            </summary>
            <param name="theObject">HLA Object to be registered.</param>
            <returns>True if method call is succesfull.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.UnconditionalAttributeOwnershipDivestiture(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            IEEE1516.1-2010 7.2 and HLA13
            </summary>
            <remarks>
            Releases ownership of a specified set of instance attributes for a specified object instance. The attributes immediately become unowned and are available for acquisition by any federate.
            </remarks>
            <param name="theObject"></param>
            <param name="attributeSet"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.NegotiatedAttributeOwnershipDivestiture``1(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},``0)">
            <summary>
            IEEE1516.1-2010 7.3 
            </summary>
            <remarks>
            Initiates an attempt to release ownership of a specified set of instance-attributes for a specified object instance. 
            In the absence of an acquiring federate, the instance-attributes will continue to be owned by the divesting federate.
            </remarks>
            <param name="theObject"></param>
            <param name="attributeSet"></param>
            <param name="user_supplied_tag"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.NegotiatedAttributeOwnershipDivestiture``1(Racon.RtiLayer.HlaObject,``0)">
            <summary>
            Racon
            </summary>
            <remarks>
            Initiates an attempt to release ownership of all instance-attributes for a specified object instance. 
            In the absence of an acquiring federate, the instance-attributes will continue to be owned by the divesting federate.
            </remarks>
            <param name="theObject"></param>
            <param name="user_supplied_tag"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.NegotiatedAttributeOwnershipDivestiture(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            HLA13: NegotiatedAttributeOwnershipDivestiture
            </summary>
            <param name="theObject"></param>
            <param name="attributeSet"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.ConfirmDivestiture``1(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},``0)">
            <summary>
            IEEE1516-2010 7.6
            </summary>
            <param name="theObject"></param>
            <param name="attributeSet"></param>
            <param name="user_supplied_tag"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.AttributeOwnershipAcquisition``1(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},``0)">
            <summary>
            IEEE1516.1-2010 7.8 
            </summary>
            <remarks>
            Initiates an attempt to acquire a specified set of attributes of an object instance. 
            </remarks>
            <param name="theObject"></param>
            <param name="attributeSet"></param>
            <param name="user_supplied_tag"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.AttributeOwnershipAcquisition``1(Racon.RtiLayer.HlaObject,``0)">
            <summary>
            Racon
            </summary>
            <remarks>
            Initiates an attempt to acquire all attributes of an object instance. 
            </remarks>
            <param name="theObject"></param>
            <param name="user_supplied_tag"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.AttributeOwnershipAcquisition(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            HLA13: AttributeOwnershipAcquisition
            </summary>
            <param name="theObject"></param>
            <param name="attributeSet"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.AttributeOwnershipAcquisitionIfAvailable(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            IEEE1516.1-2010 7.9 and HLA13 
            </summary>
            <remarks>
            Initiates an attempt to acquire a set of instanceattributes of an object instance. 
            Only instance-attributes that exist in the federation but are currently unowned will be acquired.
            </remarks>
            <param name="theObject"></param>
            <param name="attributeSet"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.AttributeOwnershipReleaseDenied(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            IEEE1516-2010 7.12
            </summary>
            <param name="theObject">Object instance designator</param>
            <param name="attributeSet">Set of attribute designators for which the joined federate is unwilling to divest ownership</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.AttributeOwnershipDivestitureIfWanted(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute}@)">
            <summary>
            IEEE1516-2010 7.13
            </summary>
            <param name="theObject">Object instance designator</param>
            <param name="attributeSet">Set of attribute designators for which the joined federate is willing to divest ownership.</param>
            <param name="attributesDivested">Set of attribute designators for which ownership has actually been divested. This is filled by the RTI.</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.CancelNegotiatedAttributeOwnershipDivestiture(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            IEEE1516.1-2010 7.14 and HLA13
            </summary>
            <remarks>
            Cancels a previously requested negotiated ownership divestiture for a specified set of instance-attributes of a specified object instance.
            </remarks>
            <param name="theObject"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.CancelAttributeOwnershipAcquisition(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            IEEE1516.1-2010 7.15 and HLA13
            </summary>
            <remarks>
            Requests the cancellation of a previously requested ownership acquisition for a specified set of instance-attributes of a specified object instance.
            </remarks>
            <param name="theObject"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.QueryAttributeOwnership(Racon.RtiLayer.HlaObject,Racon.RtiLayer.HlaAttribute)">
            <summary>
            IEEE1516.1-2010 7.17 and HLA13 
            </summary>
            <remarks>
            Determines which federate (if any) holds the attribute ownership token for a given instance-attribute.
            </remarks>
            <param name="theObject"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.IsAttributeOwnedByFederate(Racon.RtiLayer.HlaObject,Racon.RtiLayer.HlaAttribute)">
            <summary>
            IEEE1516.1-2010 7.19 and HLA13 
            </summary>
            <remarks>
            Queries the LRC to determine whether a specified instance-attribute of a specified object instance is currently owned by the local federate.
            </remarks>
            <param name="theObject"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.AttributeOwnershipReleaseResponse(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute})">
            <summary>
            HLA13
            </summary>
            <remarks>
            Releases ownership of a set of instance-attributes for a specified instance, 
            in compliance with a requestAttribute-OwnershipRelease() request. HLA-13 specific?
            </remarks>
        </member>
        <member name="M:Racon.CGenericFederate.EnableTimeRegulation(System.Double)">
            <summary>
            IEEE1516.1-2010: 8.2 Enable Time Regulation
            </summary>
            <param name="lookahead">the lookahead to use for the federate</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.EnableTimeRegulation(System.Double,System.Double)">
            <summary>
            HLA13 - Enable Time Regulation. parameters are seconds
            </summary>
            <param name="federateTime">the minimum logical time to set the federate‚Äôs logical time to when turning regulation on</param>
            <param name="lookahead">the lookahead to use for the federate</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.DisableTimeRegulation">
            <summary>
            IEEE1516.1-2010: 8.4 Disable Time Regulation
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.EnableTimeConstrained">
            <summary>
            IEEE1516.1-2010: 8.5 Enable Time Constrained
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.DisableTimeConstrained">
            <summary>
            IEEE1516.1-2010: 8.7 Disable Time Constrained
            </summary>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.nextMessageRequest(System.Double)">
            <summary>
            IEEE1516.1-2010: 8.10 Next Message Request
            </summary>
            <param name="logicalTime"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.NextEventRequest(System.Double)">
            <summary>
            HLA13: nextEventRequest
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.nextMessageRequestAvailable(System.Double)">
            <summary>
            IEEE1516.1-2010: 8.11 Next Message Request Available
            </summary>
            <param name="logicalTime"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.NextEventRequestAvailable(System.Double)">
            <summary>
            HLA13: nextEventRequestAvailable
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.FlushQueueRequest(System.Double)">
            <summary>
            IEEE1516.1-2010: 8.12 Flush Queue Request
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.EnableAsynchronousDelivery">
            <summary>
            IEEE1516.1-2010: 8.14 Enable Asynchronous Delivery
            </summary>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.DisableAsynchronousDelivery">
            <summary>
            IEEE1516.1-2010: 8.15 Disable Asynchronous Delivery
            </summary>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.ChangeAttributeOrderType(Racon.RtiLayer.HlaObject,System.Collections.Generic.List{Racon.RtiLayer.HlaAttribute},Racon.OrderType)">
            <summary>
            IEEE1516.1-2010: 8.23 Change Attribute Order Type
            </summary>
            <param name="theObject"></param>
            <param name="attributes"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.ChangeInteractionOrderType(Racon.RtiLayer.HlaInteractionClass,Racon.OrderType)">
            <summary>
            IEEE1516.1-2010: 8.24 Change Interaction Order Type
            </summary>
            <param name="ic"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.ModifyLookahead(System.Double)">
            <summary>
            IEEE1516.1-2010: 8.19 Modify Lookahead
            </summary>
            <param name="lookahead">requested lookahead (lookahead is a time interval)</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.QueryLookahead">
            <summary>
            IEEE1516.1-2010: 8.20 Query Lookahead
            </summary>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.QueryLogicalTime">
            <summary>
            IEEE1516.1-2010: 8.17 Query Logical Time
            </summary>
            <returns>The invoking joined federate‚Äôs current logical time.</returns>
        </member>
        <member name="M:Racon.CGenericFederate.QueryFederateTime">
            <summary>
            HLA13 - Query Federate Time
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.queryGALT(System.Double@)">
            <summary>
            IEEE1516.1 2010 - 8.16 Query Greatest Available Logical Time (GALT)
            </summary>
            <param name="Galt">(Optional) current value of invoking joined federate‚Äôs GALT</param>
            <returns>GALT definition indicator returns True if GALT is defined</returns>
        </member>
        <member name="M:Racon.CGenericFederate.queryGALT">
            <summary>
            IEEE1516.1-2010: 8.16 Query Greatest Available Logical Time (GALT) - with optional GALT value
            </summary>
            <returns>GALT definition indicator returns True if GALT is defined</returns>
        </member>
        <member name="M:Racon.CGenericFederate.QueryLBTS">
            <summary>
            HLA13 - QueryLBTS = QueryGALT
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.QueryLITS(System.Double@)">
            <summary>
            IEEE1516.1-2010: 8.18 Query List Incoming Time Stamp (LIST)
            </summary>
            <param name="Lits">Optional current value of invoking joined federate‚Äôs LITS</param>
            <returns>LITS definition indicator returns True if LIST is defined</returns>
        </member>
        <member name="M:Racon.CGenericFederate.QueryLITS">
            <summary>
            IEEE1516.1-2010: 8.18 Query List Incoming Time Stamp (LIST) - with optional LITS value
            </summary>
            <returns>LITS definition indicator returns True if LIST is defined</returns>
        </member>
        <member name="M:Racon.CGenericFederate.QueryMinNextEventTime">
            <summary>
            HLA13 - QueryMinNextEventTime = queryLITS
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.Retract(Racon.RtiLayer.MessageRetraction)">
            <summary>
            IEEE1516.1-2010: 8.21 Retracts the message with specified retraction handle.
            </summary>
            <param name="retraction"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.TimeAdvanceRequest(System.Double)">
            <summary>
            IEEE1516.1-2010: 8.8 Time Advance Request
            </summary>
            <param name="time">the logical time</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.TimeAdvanceRequestAvailable(System.Double)">
            <summary>
            IEEE1516.1-2010: 8.9 Time Advance Request Available
            </summary>
            <param name="time">the logical time</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.GetFederateHandle(System.String)">
            <summary>
            IEEE1516.1-2010 10.4: getFederateHandle
            </summary>
            <param name="federateName"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.GetFederateName(System.UInt32)">
            <summary>
            IEEE1516.1-2010 10.5: getFederateName
            </summary>
            <param name="federateHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.GetAllDimensionHandles">
            <summary>
            Racon: getAllDimensionHandles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.GetDimensionHandle(System.String)">
            <summary>
            IEEE1516.1-2010 10.25: getDimensionHandle
            </summary>
            <param name="name">Dimension name</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.GetDimensionName(System.UInt32)">
            <summary>
            IEEE1516.1-2010 10.26: getDimensionName
            </summary>
            <param name="handle">Dimension handle</param>
            <returns></returns>
        </member>
        <member name="M:Racon.CGenericFederate.SetRangeBounds(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            IEEE1516.1-2010 10.30: setRangeBounds
            </summary>
            <param name="regionHandle"></param>
            <param name="dimensionHandle"></param>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
        </member>
        <member name="M:Racon.CGenericFederate.EnableAttributeRelevanceAdvisorySwitch">
            <summary>
            IEEE1516.1-2010 10.35: Enable Attribute Relevance Advisory Switch enables the generation of the Attribute Relevance Advisory Switch service advisory 
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.EnableAttributeScopeAdvisorySwitch">
            <summary>
            IEEE1516.1-2010 10.37: EnableAttributeScopeAdvisorySwitch
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.EnableInteractionRelevanceAdvisorySwitch">
            <summary>
            IEEE1516.1-2010 10.39: EnableInteractionRelevanceAdvisorySwitch
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.EnableObjectClassRelevanceAdvisorySwitch">
            <summary>
            Enable Object Class Relevance Advisory Switch enables the generation of the Start/Stop Registration For Object Class service advisory 
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.DisableAttributeRelevanceAdvisorySwitch">
            <summary>
            Disable Attribute Relevance Advisory Switch disables the generation of the Attribute Relevance Advisory Switch service advisory
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.DisableAttributeScopeAdvisorySwitch">
            <summary>
            DisableAttributeScopeAdvisorySwitch
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.DisableObjectClassRelevanceAdvisorySwitch">
            <summary>
            Disable Object Class Relevance Advisory Switch disables the generation of the Start/Stop Registration For Object Class service advisory 
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.DisableInteractionRelevanceAdvisorySwitch">
            <summary>
            DisableInteractionRelevanceAdvisorySwitch
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.EvokeCallback(System.Double)">
            <summary>
            Evoke Callback
            <param name="approximateMinimumTimeInSeconds">this service invocation shall wait for the duration indicated by this argument. Default is 0.01 sec (1 msec)</param>
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.EvokeMultipleCallbacks(System.Double,System.Double)">
            <summary>
            Instructs the RTI that the invoking federate is prepared to receive multiple federate callbacks.The service shall continue to process available callbacks until the minimum specified wall-clock time. At that wall-clock time, if there are no additional callbacks to be delivered to the federate, the service shall complete. If, after the minimum specified wall-clock time, there continue to be callbacks, the RTI shall continue to deliver those callbacks until the maximum specified wall-clock time is exceeded.
            <param name="approximateMinimumTimeInSeconds">Min amount of wallclock time. </param>
            <param name="approximateMaximumTimeInSeconds">Max amount of wallclock time.</param>
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.Tick">
            <summary>
            Tick() is alias for Evoke Callback
            </summary>
        </member>
        <member name="M:Racon.CGenericFederate.Tick(System.Double,System.Double)">
            <summary>
            Tick(min, max) is alias for Evoke Multiple Callbacks
            <param name="minimum">the minimum time interval (in wall clock seconds) to spend in tick()</param>
            <param name="maximum">the maximum time interval (in wall clock seconds) after which tick() will not begin execution of any additional processing</param>
            </summary>
        </member>
        <member name="T:Racon.CFederateStateEventArgs">
            <summary>
            Encapsulates event arguments for Federate State changed event.
            </summary>
            <remarks>This class inherits the EventArgs class. It is used in delegates (function pointers) and event handlers (event handling methods).
            </remarks>
            
        </member>
        <member name="F:Racon.CFederateStateEventArgs.FdState">
            <summary>
            Federate State
            </summary>
        </member>
        <member name="M:Racon.CFederateStateEventArgs.#ctor(Racon.FederateStates)">
            <summary>
            CFederateStateEventArgs constructor
            </summary>
            <param name="state">Federate State</param>
            
        </member>
        <member name="T:Racon.CFederationExecution">
            <summary>
            Represents a federation execution.
            </summary>
            
            <remarks>This class captures the all federation execution related data such as the name of the federation execution from the view of a joined federate.
            </remarks>
        </member>
        <member name="P:Racon.CFederationExecution.Name">
            <summary>
            Federation execution name
            </summary>
        </member>
        <member name="P:Racon.CFederationExecution.FDD">
            <summary>
            FDD (Federation Document Data) / FED (Federation Execution Data) file name with full path
            </summary>
        </member>
        <member name="P:Racon.CFederationExecution.FomModules">
            <summary>
            Fom Modules
            </summary>
        </member>
        <member name="P:Racon.CFederationExecution.FederateName">
            <summary>
            Name of the Joined Federate in the Federation Execution
            </summary>
        </member>
        <member name="P:Racon.CFederationExecution.FederateType">
            <summary>
            Type of the Joined Federate in the Federation Execution
            </summary>
        </member>
        <member name="P:Racon.CFederationExecution.ConnectionSettings">
            <summary>
            Connection settings - local Settings Designator in Connect() call
            </summary>
        </member>
        <member name="M:Racon.CFederationExecution.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Racon.CFederationStateEventArgs">
            <summary>
            Encapsulates event arguments for Federation State changed event.
            </summary>
            <remarks>This class inherits the EventArgs class. It is used in delegates and event handlers.
            </remarks>
            
        </member>
        <member name="F:Racon.CFederationStateEventArgs.FedExecState">
            <summary>
            Federation Execution State
            </summary>
        </member>
        <member name="M:Racon.CFederationStateEventArgs.#ctor(Racon.FederationExecutionStates)">
            <summary>
            Constructor
            </summary>
            <param name="state">Federation State</param>
            
        </member>
        <member name="T:Racon.Logger.LogManager">
            <summary>
            RACoN log manager
            </summary>
        </member>
        <member name="P:Racon.Logger.LogManager.LogLevel">
            <summary>
            Current Log Level. When it is set, it reports version, RTI native library, and current log level via <see cref="P:Racon.CGenericFederate.StatusMessage"/>.
            </summary>
        </member>
        <member name="F:Racon.Logger.LogManager.Log">
            <summary>
            Keeps all the log entries
            </summary>
        </member>
        <member name="M:Racon.Logger.LogManager.#ctor">
            <summary>
            LogManager constructor
            </summary>
        </member>
        <member name="M:Racon.Logger.LogManager.Add(System.String,Racon.LogLevel)">
            <summary>
            Adds a log entry to the log.
            </summary>
        </member>
        <member name="M:Racon.Logger.LogManager.ToString">
            <summary>
            Dumbs all log entries in form of a string
            </summary>
        </member>
        <member name="T:Racon.ObjectModel.CExtent">
            <summary>
            CExtent
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CExtent.LowerBound">
            <summary>
            Lower bound.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CExtent.UpperBound">
            <summary>
            Upper bound.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CExtent.Dimension">
            <summary>
            Dimension.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CExtent.#ctor(Racon.ObjectModel.CDimension,System.UInt64,System.UInt64)">
            <summary>
            CExtent constructor.
            </summary>
        </member>
        <member name="T:Racon.ObjectModel.CRegion">
            <summary>
            HLA13: CRegion
            </summary>
        </member>
        <member name="F:Racon.ObjectModel.CRegion.Extents">
            <summary>
             Extent List - It should be defined and added to list for each extent according to dimension count.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CRegion.Space">
            <summary>
             Routing space. HLA13 specific.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CRegion.RtiAmb">
            <summary>
             RtiAmb reference.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CRegion.#ctor(System.String)">
            <summary>
             CRegion constructor.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CRegion.CreateRegion(Racon.ObjectModel.CRoutingSpace)">
            <summary>
             CreateRegion.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CRegion.SetRangeBounds">
            <summary>
             SetRangeBounds.
            </summary>
        </member>
        <member name="T:Racon.ObjectModel.CDimension">
            <summary>
            Dimension
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CDimension.Name">
            <summary>
            Region name.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CDimension.Space">
            <summary>
            Routing space reference. HLA13 specific.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CDimension.Handle">
            <summary>
            Handle.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CDimension.RtiAmb">
            <summary>
            RtiAmb reference. If it is null, then Handle is -1.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CDimension.#ctor(System.String,Racon.ObjectModel.CRoutingSpace)">
            <summary>
            CDimension constructor. Dimension name must be the same with the one specified in FED/FDD.
            </summary>
        </member>
        <member name="T:Racon.ObjectModel.CRoutingSpace">
            <summary>
            Represents a routing space. HLA3 specific.
            </summary>
        </member>
        <member name="F:Racon.ObjectModel.CRoutingSpace.Dimensions">
            <summary>
            Dimension list.
            </summary>
        </member>
        <member name="F:Racon.ObjectModel.CRoutingSpace.Regions">
            <summary>
            Region list.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CRoutingSpace.Name">
            <summary>
            Routing space name.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CRoutingSpace.Handle">
            <summary>
            Routing space handle.
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CRoutingSpace.RtiAmb">
            <summary>
            RtiAmb reference.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CRoutingSpace.#ctor(System.String)">
            <summary>
            CRoutingSpace. Name must be the same with specified in FED.
            </summary>
        </member>
        <member name="T:Racon.ObjectModel.NamespaceDoc">
            <summary>
            The HLA object model supports the construction of the simulation object model, which includes the HLA objects, interactions, and routing spaces (plus regions).
            </summary>
            
            <remarks>The routing space list is for backward compatibility and only used for HLA 1.3 federations. The data structure used for lists is the binding list (Bind-ingList) class, which is a generic collection class from .NET API. 
            </remarks>
            
        </member>
        <member name="T:Racon.ObjectModel.CObjectModel">
            <summary>
            CObjectModel
            </summary>
        </member>
        <member name="F:Racon.ObjectModel.CObjectModel.ICList">
            <summary>
            Interaction Class List
            </summary>
        </member>
        <member name="F:Racon.ObjectModel.CObjectModel.OCList">
            <summary>
            Object Class List
            </summary>
        </member>
        <member name="F:Racon.ObjectModel.CObjectModel.RSList">
             <summary>
            Routing Space List for HLA13
             </summary>
        </member>
        <member name="P:Racon.ObjectModel.CObjectModel.Dimensions">
            <summary>
            Dimensions
            </summary>
        </member>
        <member name="P:Racon.ObjectModel.CObjectModel.RtiAmb">
            <summary>
            RtiAmb reference.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CObjectModel.#ctor">
            <summary>
            CObjectModel constructor.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CObjectModel.AddToObjectModel(Racon.RtiLayer.HlaObjectClass)">
            <summary>
            Adds an object class to object model.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CObjectModel.AddToObjectModel(Racon.RtiLayer.HlaInteractionClass)">
            <summary>
            Adds an interaction class to object model.
            </summary>
        </member>
        <member name="M:Racon.ObjectModel.CObjectModel.AddToObjectModel(Racon.RtiLayer.HlaDimension)">
            <summary>
            Adds a dimension to object model.
            </summary>
            <param name="dimension"></param>
        </member>
        <member name="M:Racon.ObjectModel.CObjectModel.AddToObjectModel(Racon.ObjectModel.CRoutingSpace)">
            <summary>
            HLA13: Adds a routing space to object model.
            </summary>
        </member>
        <member name="T:Racon.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Racon.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Racon.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Racon.Properties.Resources.LibName">
            <summary>
              Looks up a localized string similar to RACoN.
            </summary>
        </member>
        <member name="P:Racon.Properties.Resources.LibVersion">
            <summary>
              Looks up a localized string similar to 0.0.2.4.
            </summary>
        </member>
        <member name="T:Racon.NamespaceDoc">
            <summary>
            The RTI abstraction component for .NET (RACoN).
            </summary>
            <remarks>RACoN deals with the HLA runtime infrastructure (RTI) level communication in order to access the federation-wide data (actually, the objects and interactions exchanged in federation). RTI is a middleware broker software that manages the federation execution and management, and object exchanges through a federation execution.
            The RACoN provides the .NET wrapper classes for the RTI and RTI-specific data structures. As it offers more maintainable, robust, and portable methods, developing an abstraction layer (wrapper) over RTI is a popular approach in many HLA-based projects. 
            </remarks>
            
        </member>
        <member name="T:Racon.RTILibraryType">
            <summary>
            Represents type of RTI library wrapped by RACoN. Default is HLA13_DMSO
            </summary>
        </member>
        <member name="F:Racon.RTILibraryType.HLA13_DMSO">
            <summary>
            DMSO HLA 1.3 
            </summary>
        </member>
        <member name="F:Racon.RTILibraryType.HLA13_Portico">
            <summary>
            Portico HLA 1.3
            </summary>
        </member>
        <member name="F:Racon.RTILibraryType.HLA13_OpenRti">
            <summary>
            OpenRti HLA 1.3
            </summary>
        </member>
        <member name="F:Racon.RTILibraryType.HLA1516e_Portico">
            <summary>
             Portico HLA Evolved (IEEE 1516-2010)
            </summary>
        </member>
        <member name="F:Racon.RTILibraryType.HLA1516e_OpenRti">
            <summary>
             OpenRti HLA Evolved (IEEE 1516-2010)
            </summary>
        </member>
        <member name="T:Racon.FederationExecutionStates">
            <summary>
            Enum Federation States
            Fedexec typical cycle: Initial -> Created -> Initial
            </summary>
        </member>
        <member name="F:Racon.FederationExecutionStates.FEDEX_DOESNOTEXIST">
            <summary>
            Federation is not available (does not exist). Either it is deleted or not created yet.
            </summary>
        </member>
        <member name="F:Racon.FederationExecutionStates.FEDEX_EXISTS">
            <summary>
             Federation is created.
            </summary>
        </member>
        <member name="T:Racon.FederateStates">
            <summary>
            Enum Federate States
            Federate typical cycle: Initial -> joined -> ready -> running -> Initial
            </summary>
        </member>
        <member name="F:Racon.FederateStates.NOTCONNECTED">
            <summary>
            Federate is in initial state, not connected to the RTI
            </summary>
        </member>
        <member name="F:Racon.FederateStates.CONNECTED">
            <summary>
            Compound state: JOINED + NOTJOINED
            </summary>
        </member>
        <member name="F:Racon.FederateStates.JOINED">
            <summary>
            Compound state: FREERUN + SCENARIORUN
            </summary>
        </member>
        <member name="F:Racon.FederateStates.FREERUN">
            <summary>
            Federate is joined to the federation, but it is not related to a specific scenario
            </summary>
        </member>
        <member name="F:Racon.FederateStates.SCENARIORUN">
            <summary>
            Compound state: READY, PLAYING, PAUSED
            </summary>
        </member>
        <member name="F:Racon.FederateStates.SCENARIORUN_READY">
            <summary>
            Scenario attributes are received/Updated and federate is ready for the scenario start.
            </summary>
        </member>
        <member name="F:Racon.FederateStates.SCENARIORUN_PLAYING">
            <summary>
            Scenario began and the federate is ticking
            </summary>
        </member>
        <member name="F:Racon.FederateStates.SCENARIORUN_PAUSED">
            <summary>
            Scenario paused
            </summary>
        </member>
        <member name="F:Racon.FederateStates.NOTJOINED">
            <summary>
            Federate is in initial state, connected to the RTI
            </summary>
        </member>
        <member name="T:Racon.ResignAction">
            <summary>
            Represents Resign Actions - compatible with HLA1516.2010
            </summary>
        </member>
        <member name="F:Racon.ResignAction.UNCONDITIONALLY_DIVEST_ATTRIBUTES">
            <summary>
            Unconditionally divest ownership of all owned instance attributes.
            Corresponds to RELEASE_ATTRIBUTES in HLA 13
            </summary>
        </member>
        <member name="F:Racon.ResignAction.DELETE_OBJECTS">
            <summary>
            Delete all object instances for which the joined federate has the delete privilege.
            Corresponds to DELETE_OBJECTS
            </summary>
        </member>
        <member name="F:Racon.ResignAction.CANCEL_PENDING_OWNERSHIP_ACQUISITIONS">
            <summary>
            Cancel all pending instance attribute ownership acquisitions.
            Corresponds to NO_ACTION in HLA 13
            </summary>
        </member>
        <member name="F:Racon.ResignAction.DELETE_OBJECTS_THEN_DIVEST">
            <summary>
            Perform action 2) and then action 1).
            Corresponds to DELETE_OBJECTS_AND_RELEASE_ATTRIBUTES in HLA 13
            </summary>
        </member>
        <member name="F:Racon.ResignAction.CANCEL_THEN_DELETE_THEN_DIVEST">
            <summary>
            Perform action 3), action 2), and then action 1).
            Corresponds to N/A - NO_ACTION in HLA 13
            </summary>
        </member>
        <member name="F:Racon.ResignAction.NO_ACTION">
            <summary>
            Perform no actions.
            Corresponds to NO_ACTION in HLA 13
            </summary>
        </member>
        <member name="T:Racon.OrderType">
            <summary>
            Enum Ordering Policy
            </summary>
        </member>
        <member name="F:Racon.OrderType.Receive">
            <summary>
            Receive order = 1 for HLA1516-2010
            </summary>
        </member>
        <member name="F:Racon.OrderType.TimeStamp">
            <summary>
            TimeStamp = 2 for HLA1516-2010
            </summary>
        </member>
    </members>
</doc>
